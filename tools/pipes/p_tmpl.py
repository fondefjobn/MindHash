import logging
import this
from abc import ABC, abstractmethod


class GlobalDictionary:
    """
    Class containing all keys used by pipes to update and access state values
    Use this class to update own pipe state before calling super().update()
    """
    LiveQueueSensor = property(fget=None, doc="Queue generated by ouster_sensor class for frame collection")
    PcapQueue = property(doc='')
    MatrixCloud = property(doc='')
    ModelName = property(doc="")
    ProcessedQueue = property(doc="MatrixCloud conversion to ML model dataset input format")
    Success = property(doc='Pipeline step state True if completed without exceptions')
    Step = property(doc="current pipeline step")
    Host = property(doc='hostname')
    Port = property(doc='port')


GN = GlobalDictionary


class State:
    """
    Wrapper class for state and args used in script execution
    """
    state: dict
    args: dict

    def __init__(self):
        self.state = {
            GN.Success: True
        }

    def merge(self, new_state):
        self.state.update(new_state.state)

    def __setitem__(self, key, value):
        self.state[key] = value

    def __getitem__(self, key):
        print(str(key))
        return self.state[key]


class Pipeline(ABC):
    state: State = State()

    @abstractmethod
    def execute(self, prev: State):
        """
        Execute pipeline and return True if execution finished without raising exceptions
        Parameters
        ----------
        prev : current state (passed from previous pipe)

        Returns
        -------

        """
        if not prev.state[GN.Success]:
            logging.Logger.error(f'Broken pipe at step f{prev.state["step"]}')
            exit(1)
        self.state[GN.Step] = self.__class__.__name__

    def update(self, old_state: State):
        self.state.merge(old_state)
